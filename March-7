Q1:
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        int n = 0;
        ListNode* random = head;
        while(random!=NULL){
            random = random->next;;
            n++;
        }
        n = ceil(n/2);
       
        random = head;
        while(n>0){
          random = random->next;
        n--;
        }
        return random;
    }
};

Q2:

    class Solution {
  public:
    string longestSubstring(string s, int N) {
        
        int sp[N+1][N+1];
 
 
        memset(sp, 0, sizeof(sp));
     
        string ans; 
        int l  = 0; 
     
        int i, index = 0;
        for (i=1; i<=N; i++)
        {
            for (int j=i+1; j<=N; j++)
            {
               
                if (s[i-1] == s[j-1] &&
                    sp[i-1][j-1] < (j - i))
                {
                    sp[i][j] = sp[i-1][j-1] + 1;
     
                    
                    if (sp[i][j] > l)
                    {
                        l = sp[i][j];
                        index = max(i, index);
                    }
                }
                else
                    sp[i][j] = 0;
            }
        }
     
        
        if (l > 0)
            for (i = index - l + 1; i <= index; i++)
                ans.push_back(s[i-1]);
        if(ans=="")
            ans="-1";
        return ans;
    }
};
